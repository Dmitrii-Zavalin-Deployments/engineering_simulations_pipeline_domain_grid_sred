name: Fluid Simulation Data Pipeline

on:
  push:
    branches:
      - "**"
  workflow_dispatch:

jobs:
  process_fluid_data:
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üß± Install system dependencies (Gmsh, Qt, etc.)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libglu1-mesa-dev \
            libfreetype6-dev \
            libfontconfig1-dev \
            libxrender1 \
            gmsh

      - name: üêç Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: ‚úÖ Verify installed packages
        run: |
          pip freeze
          pip check

      - name: üßπ Clear simulation output artifacts
        run: |
          rm -rf "$GITHUB_WORKSPACE/data/testing-input-output/"*
          echo "‚úÖ Output directories cleaned"

      - name: ‚úÖ Make Dropbox download script executable
        run: chmod +x src/download_from_dropbox.sh

      - name: ‚òÅÔ∏è Download simulation files from Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/download_from_dropbox.sh

      - name: üß† Run domain extraction via Gmsh CLI module
        run: |
          python3 src/gmsh_runner.py \
            --step data/testing-input-output/input.step \
            --resolution 0.01 \
            --output data/testing-input-output/enriched_metadata.json

      - name: üîç Validate output JSON against schema
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
        run: |
          python -c "
          import json, jsonschema
          from pathlib import Path
          output_path = Path('data/testing-input-output/enriched_metadata.json')
          if not output_path.exists():
              raise FileNotFoundError(f'Schema validation failed ‚Äî file not found: {output_path}')
          with open('schemas/domain_schema.json') as s, open(output_path) as d:
              schema = json.load(s)
              data = json.load(d)
              jsonschema.validate(instance=data, schema=schema)
          "
          echo "‚úÖ Output schema validated"

      - name: üî¨ Run test suite (unit + integration + edge guards)
        env:
          PYTHONPATH: "${{ github.workspace }}/src"
        run: python -m pytest -s tests/ --verbose -ra

      - name: üß≠ Debug directory tree
        run: ls -R $GITHUB_WORKSPACE

      - name: ‚úÖ Make upload script executable
        run: chmod +x src/upload_to_dropbox.sh

      - name: ‚òÅÔ∏è Upload outputs to Dropbox
        env:
          APP_KEY: ${{ secrets.APP_KEY }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: src/upload_to_dropbox.sh



